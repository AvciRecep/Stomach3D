//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: dud_model
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 16469, pycml: 16306, optimize: 14997)
//! on Wed Jan 30 15:07:23 2013
//! 
//! <autogenerated>

#include "DummyCellFundus.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"

    double DummyCellFundus::Get_ICC_Membrane__Cm()
    {
        return var_ICC_Membrane__Cm;
    }
    
    double DummyCellFundus::Get_chaste_interface__i_ionic()
    {
        return var_chaste_interface__i_ionic;
    }
    
    DummyCellFundus::DummyCellFundus(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                1,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<DummyCellFundus>::Instance();
        Init();

    }
    
    DummyCellFundus::~DummyCellFundus()
    {
    }
    
    void DummyCellFundus::VerifyStateVariables()
    {
        
    }
    
    double DummyCellFundus::GetIIonic(const std::vector<double>* pStateVariables)
    {
        
        var_chaste_interface__i_ionic = 0.0; // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void DummyCellFundus::EvaluateYDerivatives(double var_chaste_interface__Time__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        
        
        // Mathematics
        double d_dt_chaste_interface__ICC_Membrane__Vm;
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__ICC_Membrane__Vm = 0.0;
        }
        else
        {
            var_ICC_Membrane__Cm = 2.5e-05; // uFpmmsq
            d_dt_chaste_interface__ICC_Membrane__Vm = (0.0 / var_ICC_Membrane__Cm) * 0.0; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__ICC_Membrane__Vm;
    }
    
template<>
void OdeSystemInformation<DummyCellFundus>::Initialise(void)
{
    this->mSystemName = "dud_model";
    this->mFreeVariableName = "Time__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("ICC_Membrane__Vm");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-57);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(DummyCellFundus)
